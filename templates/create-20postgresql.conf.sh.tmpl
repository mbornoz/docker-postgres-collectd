#!/bin/sh

OUTPUT=/etc/collectd/collectd.conf.d/20postgresql.conf
DBLIST_QUERY="SELECT datname FROM pg_database WHERE datistemplate = false AND datallowconn = true AND datname NOT IN ('postgres', 'rdsadmin');"

echo '<Plugin "postgresql">' > $OUTPUT

{{ $containers := getvs "/containers/*/name" -}}
{{ range $containers -}}
  {{ $contname := . -}}
  {{ $label := printf "/containers/%s/labels/com.camptocamp.monitoring.postgres" $contname -}}
  {{ $monitor := getv $label "false" -}}
  {{ if eq $monitor "true" }}
    {{ $stack_name := printf "/containers/%s/stack_name" $contname -}}
    {{ $service_name := printf "/containers/%s/service_name" $contname -}}
    {{ $stack := getv $stack_name -}}
    {{ $service := getv $service_name -}}
    {{ $user_path := printf "/stacks/%s/services/%s/metadata/credentials/user" $stack $service }}
    {{ $password_path := printf "/stacks/%s/services/%s/metadata/credentials/password" $stack $service }}
    {{ $user := getv $user_path "postgres" -}}

cat <<EOF >> $OUTPUT
  <Database postgres>
    Instance "{{ $contname }}"
    Host "{{ $contname }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end }}
    Query replication_lag
    Query replication_write_lag
    Query replication_flush_lag
    Query replication_replay_lag
    Query replication_slots
    Query current_xlog_location
    Query last_xlog_receive_location
    Query last_xlog_replay_location
    Query settings
  </Database>

EOF

{{ if exists $password_path -}}
export PGPASSWORD="{{ getv $password_path }}"
{{ end }}
echo $DBLIST_QUERY | psql -h {{ $service }}.{{ $stack }} -At -U{{ $user }} -d template1 | while read database; do

cat <<EOF >> $OUTPUT
  <Database $database>
    Instance "{{ $contname }}_$database"
    Host "{{ $contname }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end }}
    Query backends
    Query transactions
    Query queries
    Query query_plans
    Query table_states
    Query disk_io
    Query disk_usage
  </Database>

EOF

done

  {{ end -}}
{{ end -}}

{{ range $stack := lsdir "/stacks" -}}
  {{ $services := printf "/stacks/%s/services" $stack -}}
  {{ range $service := lsdir $services -}}
  {{ $kind := printf "/stacks/%s/services/%s/kind" $stack $service -}}
  {{ $_kind := getv $kind -}}
  {{ if eq $_kind "externalService" -}}
    {{ $label := printf "/stacks/%s/services/%s/labels/com.camptocamp.monitoring.postgres" $stack $service -}}
    {{ $monitor := getv $label "false" -}}
    {{ if eq $monitor "true" }}
      {{ $user_path := printf "/stacks/%s/services/%s/metadata/credentials/user" $stack $service }}
      {{ $password_path := printf "/stacks/%s/services/%s/metadata/credentials/password" $stack $service }}
      {{ $user := getv $user_path "postgres" -}}
cat <<EOF >> $OUTPUT
  <Database postgres>
    Instance "{{ $service }}.{{ $stack }}"
    Host "{{ $service }}.{{ $stack }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end -}}
    Query replication_lag
    Query replication_write_lag
    Query replication_flush_lag
    Query replication_replay_lag
    Query replication_slots
    Query current_xlog_location
    Query last_xlog_receive_location
    Query last_xlog_replay_location
    Query settings
  </Database>

EOF

{{ if exists $password_path -}}
export PGPASSWORD="{{ getv $password_path }}"
{{ end -}}
echo $DBLIST_QUERY | psql -h {{ $service }}.{{ $stack }} -At -U{{ $user }} -d template1 | while read database; do

cat <<EOF >> $OUTPUT
  <Database $database>
    Instance "{{ $service }}.{{ $stack }}_$database"
    Host "{{ $service }}.{{ $stack }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end -}}
    Query backends
    Query transactions
    Query queries
    Query query_plans
    Query table_states
    Query disk_io
    Query disk_usage
  </Database>

EOF

done
      {{ end -}}
    {{ end -}}
  {{ end -}}
{{ end }}

echo '</Plugin>' >> $OUTPUT
